//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/8/2016 16:13:57
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ArchiveCatalog
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class ArchiveCatalogContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ArchiveCatalogContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);


        #endregion

        public ArchiveCatalogContext() :
        base(@"Data Source=D:\Develop\TestProjects\DevartTest\ArchiveTest;FailIfMissing=False", mappingSource)
        {
            OnCreated();
        }

        public ArchiveCatalogContext(MappingSource mappingSource) :
        base(@"Data Source=D:\Develop\TestProjects\DevartTest\ArchiveTest;FailIfMissing=False", mappingSource)
        {
            OnCreated();
        }

        public ArchiveCatalogContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ArchiveCatalogContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ArchiveCatalogContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ArchiveCatalogContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Patient> Patients
        {
            get
            {
                return this.GetTable<Patient>();
            }
        }
    }

    /// <summary>
    /// There are no comments for Patient in the schema.
    /// </summary>
    public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _PatientId;

        private string _VisitKey;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPatientIdChanging(int value);
        partial void OnPatientIdChanged();
        partial void OnVisitKeyChanging(string value);
        partial void OnVisitKeyChanged();
        #endregion

        public Patient()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PatientId in the schema.
        /// </summary>
        [Column(Storage = "_PatientId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "integer NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PatientId
        {
            get
            {
                return this._PatientId;
            }
            set
            {
                if (this._PatientId != value)
                {
                    this.OnPatientIdChanging(value);
                    this.SendPropertyChanging();
                    this._PatientId = value;
                    this.SendPropertyChanged("PatientId");
                    this.OnPatientIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VisitKey in the schema.
        /// </summary>
        [Column(Storage = "_VisitKey", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string VisitKey
        {
            get
            {
                return this._VisitKey;
            }
            set
            {
                if (this._VisitKey != value)
                {
                    this.OnVisitKeyChanging(value);
                    this.SendPropertyChanging();
                    this._VisitKey = value;
                    this.SendPropertyChanged("VisitKey");
                    this.OnVisitKeyChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
