#include "stdafx.h"
#include "patterns, contraction.h"

using namespace patterns;

/*
 =======================================================================================================================
    Construction and destruction.
 =======================================================================================================================
 */
contraction::contraction(void)
{
	_artifactkey = -1;

	s = p = e = 0;
	istrikeout = false;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction::contraction(long s0, long p0, long e0)
{
	_artifactkey = -1;

	s = s0;
	p = p0;
	e = e0;
	ifinal = true;
	istrikeout = false;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction::contraction(const contraction &x0)
{
	*this = x0;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction::~contraction(void)
{
}

/*
 =======================================================================================================================
    Access the contraction's starting index.
 =======================================================================================================================
 */
long contraction::get_start(void) const
{
	return s;
}

/*
 =======================================================================================================================
    Access the contraction's peak index.
 =======================================================================================================================
 */
long contraction::get_peak(void) const
{
	return p;
}

/*
 =======================================================================================================================
    Access the contraction's end index.
 =======================================================================================================================
 */
long contraction::get_end(void) const
{
	return e;
}

/*
 =======================================================================================================================
    Is this contraction final or not?
 =======================================================================================================================
 */
bool contraction::is_final(void) const
{
	return ifinal;
}

/*
 =======================================================================================================================
    Set the contraction's start index.
 =======================================================================================================================
 */
void contraction::set_start(long s0)
{
	s = s0;
}

/*
 =======================================================================================================================
    Set the contraction's peak index.
 =======================================================================================================================
 */
void contraction::set_peak(long p0)
{
	p = p0;
}

/*
 =======================================================================================================================
    Set the contraction's end index.
 =======================================================================================================================
 */
void contraction::set_end(long e0)
{
	e = e0;
}
/*
 =======================================================================================================================
    Set the contraction as final or not. See class comment and predicate is_final ().
 =======================================================================================================================
 */
void contraction::set_as_final(bool i0)
{
	ifinal = i0;
}

/*
 =======================================================================================================================
    Operators. All operators have the implied meaning and act on all properties.
 =======================================================================================================================
 */
contraction &contraction::operator=(const contraction &x0)
{
	_artifactkey = x0._artifactkey;
	m_extensions = x0.m_extensions;

	s = x0.s;
	p = x0.p;
	e = x0.e;
	ifinal = x0.ifinal;
	istrikeout = x0.istrikeout;
	return *this;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
bool contraction::operator==(const contraction &x0) const
{
	return s == x0.s && p == x0.p && e == x0.e && ifinal == x0.ifinal && istrikeout == x0.istrikeout && _artifactkey == x0._artifactkey;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
bool contraction::operator!=(const contraction &x0) const
{
	return s != x0.s || p != x0.p || e != x0.e || ifinal != x0.ifinal || istrikeout != x0.istrikeout || _artifactkey != x0._artifactkey;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction contraction::operator+(long d) const
{
	/*~~~~~~~~~~~~~~~~~~*/
	contraction r = *this;
	/*~~~~~~~~~~~~~~~~~~*/

	return r += d;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction &contraction::operator+=(long d)
{
	s = get_start() + d;
	p = get_peak() + d;
	e = get_end() + d;
	return *this;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction contraction::operator-(long d) const
{
	/*~~~~~~~~~~~~~~~~~~*/
	contraction r = *this;
	/*~~~~~~~~~~~~~~~~~~*/

	return r -= d;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction &contraction::operator-=(long d)
{
	set_start(get_start() - d);
	set_peak(get_peak() - d);
	set_end(get_end() - d);
	return *this;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction contraction::operator*(long f) const
{
	/*~~~~~~~~~~~~~~~~~~*/
	contraction r = *this;
	/*~~~~~~~~~~~~~~~~~~*/

	return r *= f;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction &contraction::operator*=(long f)
{
	set_start(f * get_start());
	set_peak(f * get_peak());
	set_end(f * get_end());
	return *this;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction contraction::operator/(long d) const
{
	/*~~~~~~~~~~~~~~~~~~*/
	contraction r = *this;
	/*~~~~~~~~~~~~~~~~~~*/

	return r /= d;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
contraction &contraction::operator/=(long d)
{
	s = get_start() / d;
	p = get_peak() / d;
	e = get_end() / d;
	return *this;
}

/*
 =======================================================================================================================
    Do this and given contraction intersect? Two contractions are said to intersect if and only if they have at least
    one index in common. See operators == () and != (). This assumes that, for any contraction c, c. get_start () <= c.
    get_end ().
 =======================================================================================================================
 */
bool contraction::intersects(const contraction &x0) const
{
	return get_end() >= x0.get_start() && get_start() <= x0.get_end();
}

/////////////
/// Extension methods to allow class using contraction to store custom data on a contraction

// Check if a specific extension exists
bool contraction::has_extension(string name) const
{
	return m_extensions.find(name) != m_extensions.end();
}

// Returns the value associated to an extension
string contraction::get_extension(string name) const
{
	return m_extensions[name];
}

// Set the value associated to an extension
void contraction::set_extension(string name, string value)
{
	m_extensions[name] = value;
}