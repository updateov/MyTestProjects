#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PeriGen.Patterns.Research.SQLHelper
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TEST-RDPAT")]
	public partial class PatternsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserAction(UserAction instance);
    partial void UpdateUserAction(UserAction instance);
    partial void DeleteUserAction(UserAction instance);
    partial void InsertArtifact(Artifact instance);
    partial void UpdateArtifact(Artifact instance);
    partial void DeleteArtifact(Artifact instance);
    partial void InsertTracing(Tracing instance);
    partial void UpdateTracing(Tracing instance);
    partial void DeleteTracing(Tracing instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    #endregion
		
		public PatternsDataContext() : 
				base(global::PeriGen.Patterns.Research.SQLHelper.Properties.Settings.Default.PatternsDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PatternsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatternsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatternsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatternsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserAction> UserActions
		{
			get
			{
				return this.GetTable<UserAction>();
			}
		}
		
		public System.Data.Linq.Table<Artifact> Artifacts
		{
			get
			{
				return this.GetTable<Artifact>();
			}
		}
		
		public System.Data.Linq.Table<Tracing> Tracings
		{
			get
			{
				return this.GetTable<Tracing>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="UserActions")]
	public partial class UserAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionId;
		
		private int _PatientId;
		
		private int _ArtifactId;
		
		private byte _ActionType;
		
		private string _UserId;
		
		private string _UserName;
		
		private System.Nullable<System.DateTime> _PerformTime;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIdChanging(int value);
    partial void OnActionIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnArtifactIdChanging(int value);
    partial void OnArtifactIdChanged();
    partial void OnActionTypeChanging(byte value);
    partial void OnActionTypeChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPerformTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPerformTimeChanged();
    #endregion
		
		public UserAction()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActionId
		{
			get
			{
				return this._ActionId;
			}
			set
			{
				if ((this._ActionId != value))
				{
					this.OnActionIdChanging(value);
					this.SendPropertyChanging();
					this._ActionId = value;
					this.SendPropertyChanged("ActionId");
					this.OnActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtifactId", DbType="Int NOT NULL")]
		public int ArtifactId
		{
			get
			{
				return this._ArtifactId;
			}
			set
			{
				if ((this._ArtifactId != value))
				{
					this.OnArtifactIdChanging(value);
					this.SendPropertyChanging();
					this._ArtifactId = value;
					this.SendPropertyChanged("ArtifactId");
					this.OnArtifactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="TinyInt NOT NULL")]
		public byte ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PerformTime
		{
			get
			{
				return this._PerformTime;
			}
			set
			{
				if ((this._PerformTime != value))
				{
					this.OnPerformTimeChanging(value);
					this.SendPropertyChanging();
					this._PerformTime = value;
					this.SendPropertyChanged("PerformTime");
					this.OnPerformTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_UserAction", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.UserActions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.UserActions.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Artifacts")]
	public partial class Artifact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArtifactId;
		
		private int _PatientId;
		
		private byte _Category;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private System.Nullable<byte> _Y1;
		
		private System.Nullable<byte> _Y2;
		
		private System.Nullable<byte> _BaselineVariability;
		
		private System.Nullable<System.DateTime> _PeakTime;
		
		private System.Nullable<byte> _PeakValue;
		
		private System.Nullable<byte> _Confidence;
		
		private System.Nullable<byte> _Repair;
		
		private System.Nullable<byte> _Height;
		
		private System.Nullable<bool> _IsNonInterpretable;
		
		private System.Nullable<byte> _DecelerationCategory;
		
		private System.Nullable<byte> _NonReassuringFeatures;
		
		private System.Nullable<System.DateTime> _ContractionStart;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtifactIdChanging(int value);
    partial void OnArtifactIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnCategoryChanging(byte value);
    partial void OnCategoryChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnY1Changing(System.Nullable<byte> value);
    partial void OnY1Changed();
    partial void OnY2Changing(System.Nullable<byte> value);
    partial void OnY2Changed();
    partial void OnBaselineVariabilityChanging(System.Nullable<byte> value);
    partial void OnBaselineVariabilityChanged();
    partial void OnPeakTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPeakTimeChanged();
    partial void OnPeakValueChanging(System.Nullable<byte> value);
    partial void OnPeakValueChanged();
    partial void OnConfidenceChanging(System.Nullable<byte> value);
    partial void OnConfidenceChanged();
    partial void OnRepairChanging(System.Nullable<byte> value);
    partial void OnRepairChanged();
    partial void OnHeightChanging(System.Nullable<byte> value);
    partial void OnHeightChanged();
    partial void OnIsNonInterpretableChanging(System.Nullable<bool> value);
    partial void OnIsNonInterpretableChanged();
    partial void OnDecelerationCategoryChanging(System.Nullable<byte> value);
    partial void OnDecelerationCategoryChanged();
    partial void OnNonReassuringFeaturesChanging(System.Nullable<byte> value);
    partial void OnNonReassuringFeaturesChanged();
    partial void OnContractionStartChanging(System.Nullable<System.DateTime> value);
    partial void OnContractionStartChanged();
    #endregion
		
		public Artifact()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtifactId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArtifactId
		{
			get
			{
				return this._ArtifactId;
			}
			set
			{
				if ((this._ArtifactId != value))
				{
					this.OnArtifactIdChanging(value);
					this.SendPropertyChanging();
					this._ArtifactId = value;
					this.SendPropertyChanged("ArtifactId");
					this.OnArtifactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="TinyInt NOT NULL")]
		public byte Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y1", DbType="TinyInt")]
		public System.Nullable<byte> Y1
		{
			get
			{
				return this._Y1;
			}
			set
			{
				if ((this._Y1 != value))
				{
					this.OnY1Changing(value);
					this.SendPropertyChanging();
					this._Y1 = value;
					this.SendPropertyChanged("Y1");
					this.OnY1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y2", DbType="TinyInt")]
		public System.Nullable<byte> Y2
		{
			get
			{
				return this._Y2;
			}
			set
			{
				if ((this._Y2 != value))
				{
					this.OnY2Changing(value);
					this.SendPropertyChanging();
					this._Y2 = value;
					this.SendPropertyChanged("Y2");
					this.OnY2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaselineVariability", DbType="TinyInt")]
		public System.Nullable<byte> BaselineVariability
		{
			get
			{
				return this._BaselineVariability;
			}
			set
			{
				if ((this._BaselineVariability != value))
				{
					this.OnBaselineVariabilityChanging(value);
					this.SendPropertyChanging();
					this._BaselineVariability = value;
					this.SendPropertyChanged("BaselineVariability");
					this.OnBaselineVariabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeakTime
		{
			get
			{
				return this._PeakTime;
			}
			set
			{
				if ((this._PeakTime != value))
				{
					this.OnPeakTimeChanging(value);
					this.SendPropertyChanging();
					this._PeakTime = value;
					this.SendPropertyChanged("PeakTime");
					this.OnPeakTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakValue", DbType="TinyInt")]
		public System.Nullable<byte> PeakValue
		{
			get
			{
				return this._PeakValue;
			}
			set
			{
				if ((this._PeakValue != value))
				{
					this.OnPeakValueChanging(value);
					this.SendPropertyChanging();
					this._PeakValue = value;
					this.SendPropertyChanged("PeakValue");
					this.OnPeakValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confidence", DbType="TinyInt")]
		public System.Nullable<byte> Confidence
		{
			get
			{
				return this._Confidence;
			}
			set
			{
				if ((this._Confidence != value))
				{
					this.OnConfidenceChanging(value);
					this.SendPropertyChanging();
					this._Confidence = value;
					this.SendPropertyChanged("Confidence");
					this.OnConfidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repair", DbType="TinyInt")]
		public System.Nullable<byte> Repair
		{
			get
			{
				return this._Repair;
			}
			set
			{
				if ((this._Repair != value))
				{
					this.OnRepairChanging(value);
					this.SendPropertyChanging();
					this._Repair = value;
					this.SendPropertyChanged("Repair");
					this.OnRepairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="TinyInt")]
		public System.Nullable<byte> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNonInterpretable", DbType="Bit")]
		public System.Nullable<bool> IsNonInterpretable
		{
			get
			{
				return this._IsNonInterpretable;
			}
			set
			{
				if ((this._IsNonInterpretable != value))
				{
					this.OnIsNonInterpretableChanging(value);
					this.SendPropertyChanging();
					this._IsNonInterpretable = value;
					this.SendPropertyChanged("IsNonInterpretable");
					this.OnIsNonInterpretableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecelerationCategory", DbType="TinyInt")]
		public System.Nullable<byte> DecelerationCategory
		{
			get
			{
				return this._DecelerationCategory;
			}
			set
			{
				if ((this._DecelerationCategory != value))
				{
					this.OnDecelerationCategoryChanging(value);
					this.SendPropertyChanging();
					this._DecelerationCategory = value;
					this.SendPropertyChanged("DecelerationCategory");
					this.OnDecelerationCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonReassuringFeatures", DbType="TinyInt")]
		public System.Nullable<byte> NonReassuringFeatures
		{
			get
			{
				return this._NonReassuringFeatures;
			}
			set
			{
				if ((this._NonReassuringFeatures != value))
				{
					this.OnNonReassuringFeaturesChanging(value);
					this.SendPropertyChanging();
					this._NonReassuringFeatures = value;
					this.SendPropertyChanged("NonReassuringFeatures");
					this.OnNonReassuringFeaturesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractionStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractionStart
		{
			get
			{
				return this._ContractionStart;
			}
			set
			{
				if ((this._ContractionStart != value))
				{
					this.OnContractionStartChanging(value);
					this.SendPropertyChanging();
					this._ContractionStart = value;
					this.SendPropertyChanged("ContractionStart");
					this.OnContractionStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Artifact", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Artifacts.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Artifacts.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tracings")]
	public partial class Tracing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TracingId;
		
		private int _PatientId;
		
		private System.DateTime _StartTime;
		
		private System.Data.Linq.Binary _SignalHR1;
		
		private System.Data.Linq.Binary _SignalUP;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTracingIdChanging(int value);
    partial void OnTracingIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnSignalHR1Changing(System.Data.Linq.Binary value);
    partial void OnSignalHR1Changed();
    partial void OnSignalUPChanging(System.Data.Linq.Binary value);
    partial void OnSignalUPChanged();
    #endregion
		
		public Tracing()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TracingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TracingId
		{
			get
			{
				return this._TracingId;
			}
			set
			{
				if ((this._TracingId != value))
				{
					this.OnTracingIdChanging(value);
					this.SendPropertyChanging();
					this._TracingId = value;
					this.SendPropertyChanged("TracingId");
					this.OnTracingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalHR1", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SignalHR1
		{
			get
			{
				return this._SignalHR1;
			}
			set
			{
				if ((this._SignalHR1 != value))
				{
					this.OnSignalHR1Changing(value);
					this.SendPropertyChanging();
					this._SignalHR1 = value;
					this.SendPropertyChanged("SignalHR1");
					this.OnSignalHR1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalUP", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SignalUP
		{
			get
			{
				return this._SignalUP;
			}
			set
			{
				if ((this._SignalUP != value))
				{
					this.OnSignalUPChanging(value);
					this.SendPropertyChanging();
					this._SignalUP = value;
					this.SendPropertyChanged("SignalUP");
					this.OnSignalUPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Tracing", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Tracings.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Tracings.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private string _PatientKey;
		
		private byte _Status;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private EntitySet<UserAction> _UserActions;
		
		private EntitySet<Artifact> _Artifacts;
		
		private EntitySet<Tracing> _Tracings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnPatientKeyChanging(string value);
    partial void OnPatientKeyChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public Patient()
		{
			this._UserActions = new EntitySet<UserAction>(new Action<UserAction>(this.attach_UserActions), new Action<UserAction>(this.detach_UserActions));
			this._Artifacts = new EntitySet<Artifact>(new Action<Artifact>(this.attach_Artifacts), new Action<Artifact>(this.detach_Artifacts));
			this._Tracings = new EntitySet<Tracing>(new Action<Tracing>(this.attach_Tracings), new Action<Tracing>(this.detach_Tracings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientKey", DbType="VarChar(MAX)")]
		public string PatientKey
		{
			get
			{
				return this._PatientKey;
			}
			set
			{
				if ((this._PatientKey != value))
				{
					this.OnPatientKeyChanging(value);
					this.SendPropertyChanging();
					this._PatientKey = value;
					this.SendPropertyChanged("PatientKey");
					this.OnPatientKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_UserAction", Storage="_UserActions", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<UserAction> UserActions
		{
			get
			{
				return this._UserActions;
			}
			set
			{
				this._UserActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Artifact", Storage="_Artifacts", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Artifact> Artifacts
		{
			get
			{
				return this._Artifacts;
			}
			set
			{
				this._Artifacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Tracing", Storage="_Tracings", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<Tracing> Tracings
		{
			get
			{
				return this._Tracings;
			}
			set
			{
				this._Tracings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserActions(UserAction entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_UserActions(UserAction entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Artifacts(Artifact entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Artifacts(Artifact entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Tracings(Tracing entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Tracings(Tracing entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
}
#pragma warning restore 1591
