//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/3/2016 12:53:16
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DataContextEpisode
{

    [DatabaseAttribute(Name = "Data")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class DataContextEpisode : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataContextEpisode));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUserAction(UserAction instance);
        partial void UpdateUserAction(UserAction instance);
        partial void DeleteUserAction(UserAction instance);
        partial void InsertTracing(Tracing instance);
        partial void UpdateTracing(Tracing instance);
        partial void DeleteTracing(Tracing instance);
        partial void InsertArtifact(Artifact instance);
        partial void UpdateArtifact(Artifact instance);
        partial void DeleteArtifact(Artifact instance);
        partial void InsertPelvicExam(PelvicExam instance);
        partial void UpdatePelvicExam(PelvicExam instance);
        partial void DeletePelvicExam(PelvicExam instance);
        partial void InsertDataEntry(DataEntry instance);
        partial void UpdateDataEntry(DataEntry instance);
        partial void DeleteDataEntry(DataEntry instance);
        partial void InsertCurveSnapshot(CurveSnapshot instance);
        partial void UpdateCurveSnapshot(CurveSnapshot instance);
        partial void DeleteCurveSnapshot(CurveSnapshot instance);
        partial void InsertParameter(Parameter instance);
        partial void UpdateParameter(Parameter instance);
        partial void DeleteParameter(Parameter instance);

        #endregion

        public DataContextEpisode() :
        base(GetConnectionString("DataContextEpisodeConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataContextEpisode(MappingSource mappingSource) :
        base(GetConnectionString("DataContextEpisodeConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataContextEpisode(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContextEpisode(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContextEpisode(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContextEpisode(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<UserAction> UserActions
        {
            get
            {
                return this.GetTable<UserAction>();
            }
        }

        public Devart.Data.Linq.Table<Tracing> Tracings
        {
            get
            {
                return this.GetTable<Tracing>();
            }
        }

        public Devart.Data.Linq.Table<Artifact> Artifacts
        {
            get
            {
                return this.GetTable<Artifact>();
            }
        }

        public Devart.Data.Linq.Table<PelvicExam> PelvicExams
        {
            get
            {
                return this.GetTable<PelvicExam>();
            }
        }

        public Devart.Data.Linq.Table<DataEntry> DataEntries
        {
            get
            {
                return this.GetTable<DataEntry>();
            }
        }

        public Devart.Data.Linq.Table<CurveSnapshot> CurveSnapshots
        {
            get
            {
                return this.GetTable<CurveSnapshot>();
            }
        }

        public Devart.Data.Linq.Table<Parameter> Parameters
        {
            get
            {
                return this.GetTable<Parameter>();
            }
        }
    }
}

namespace DataContextEpisode
{

    /// <summary>
    /// List of user actions performed on Patterns artifacts
    /// </summary>
    [Table(Name = @"UserActions")]
    public partial class UserAction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ActionId;

        private byte _ActionType;

        private int _ArtifactId;

        private string _UserId;

        private string _UserName;

        private long _PerformedTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnActionIdChanging(int value);
        partial void OnActionIdChanged();
        partial void OnActionTypeChanging(byte value);
        partial void OnActionTypeChanged();
        partial void OnArtifactIdChanging(int value);
        partial void OnArtifactIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPerformedTimeChanging(long value);
        partial void OnPerformedTimeChanged();
        #endregion

        public UserAction()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ActionId in the schema.
        /// </summary>
        [Column(Storage = "_ActionId", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int ActionId
        {
            get
            {
                return this._ActionId;
            }
            set
            {
                if (this._ActionId != value)
                {
                    this.OnActionIdChanging(value);
                    this.SendPropertyChanging();
                    this._ActionId = value;
                    this.SendPropertyChanged("ActionId");
                    this.OnActionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActionType in the schema.
        /// </summary>
        [Column(Storage = "_ActionType", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte ActionType
        {
            get
            {
                return this._ActionType;
            }
            set
            {
                if (this._ActionType != value)
                {
                    this.OnActionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ActionType = value;
                    this.SendPropertyChanged("ActionType");
                    this.OnActionTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ArtifactId in the schema.
        /// </summary>
        [Column(Storage = "_ArtifactId", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ArtifactId
        {
            get
            {
                return this._ArtifactId;
            }
            set
            {
                if (this._ArtifactId != value)
                {
                    this.OnArtifactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ArtifactId = value;
                    this.SendPropertyChanged("ArtifactId");
                    this.OnArtifactIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PerformedTime in the schema.
        /// </summary>
        [Column(Storage = "_PerformedTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long PerformedTime
        {
            get
            {
                return this._PerformedTime;
            }
            set
            {
                if (this._PerformedTime != value)
                {
                    this.OnPerformedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._PerformedTime = value;
                    this.SendPropertyChanged("PerformedTime");
                    this.OnPerformedTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// List of tracings blocks (HR1 and UP)
    /// </summary>
    [Table(Name = @"Tracings")]
    public partial class Tracing : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TracingId;

        private long _StartTime;

        private long _EndTime;

        private byte[] _HR1;

        private byte[] _UP;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTracingIdChanging(int value);
        partial void OnTracingIdChanged();
        partial void OnStartTimeChanging(long value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(long value);
        partial void OnEndTimeChanged();
        partial void OnHR1Changing(byte[] value);
        partial void OnHR1Changed();
        partial void OnUPChanging(byte[] value);
        partial void OnUPChanged();
        #endregion

        public Tracing()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TracingId in the schema.
        /// </summary>
        [Column(Storage = "_TracingId", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int TracingId
        {
            get
            {
                return this._TracingId;
            }
            set
            {
                if (this._TracingId != value)
                {
                    this.OnTracingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TracingId = value;
                    this.SendPropertyChanged("TracingId");
                    this.OnTracingIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Storage = "_StartTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Storage = "_EndTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HR1 in the schema.
        /// </summary>
        [Column(Storage = "_HR1", DbType = "blob", UpdateCheck = UpdateCheck.Never)]
        public byte[] HR1
        {
            get
            {
                return this._HR1;
            }
            set
            {
                if (this._HR1 != value)
                {
                    this.OnHR1Changing(value);
                    this.SendPropertyChanging();
                    this._HR1 = value;
                    this.SendPropertyChanged("HR1");
                    this.OnHR1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UP in the schema.
        /// </summary>
        [Column(Storage = "_UP", DbType = "blob", UpdateCheck = UpdateCheck.Never)]
        public byte[] UP
        {
            get
            {
                return this._UP;
            }
            set
            {
                if (this._UP != value)
                {
                    this.OnUPChanging(value);
                    this.SendPropertyChanging();
                    this._UP = value;
                    this.SendPropertyChanged("UP");
                    this.OnUPChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// List of detected Patterns artifacts
    /// </summary>
    [Table(Name = @"Artifacts")]
    public partial class Artifact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ArtifactId;

        private byte _Category;

        private long _StartTime;

        private long _EndTime;

        private byte _Y1;

        private byte _Y2;

        private byte _BaselineVariability;

        private long _PeakTime;

        private byte _PeakValue;

        private byte _Confidence;

        private byte _Repair;

        private byte _Height;

        private bool _IsNonInterpretable;

        private byte _DecelerationCategory;

        private byte _NonReassuringFeatures;

        private System.Nullable<long> _ContractionStart;

        private bool _IsStrikedOut;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnArtifactIdChanging(int value);
        partial void OnArtifactIdChanged();
        partial void OnCategoryChanging(byte value);
        partial void OnCategoryChanged();
        partial void OnStartTimeChanging(long value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(long value);
        partial void OnEndTimeChanged();
        partial void OnY1Changing(byte value);
        partial void OnY1Changed();
        partial void OnY2Changing(byte value);
        partial void OnY2Changed();
        partial void OnBaselineVariabilityChanging(byte value);
        partial void OnBaselineVariabilityChanged();
        partial void OnPeakTimeChanging(long value);
        partial void OnPeakTimeChanged();
        partial void OnPeakValueChanging(byte value);
        partial void OnPeakValueChanged();
        partial void OnConfidenceChanging(byte value);
        partial void OnConfidenceChanged();
        partial void OnRepairChanging(byte value);
        partial void OnRepairChanged();
        partial void OnHeightChanging(byte value);
        partial void OnHeightChanged();
        partial void OnIsNonInterpretableChanging(bool value);
        partial void OnIsNonInterpretableChanged();
        partial void OnDecelerationCategoryChanging(byte value);
        partial void OnDecelerationCategoryChanged();
        partial void OnNonReassuringFeaturesChanging(byte value);
        partial void OnNonReassuringFeaturesChanged();
        partial void OnContractionStartChanging(System.Nullable<long> value);
        partial void OnContractionStartChanged();
        partial void OnIsStrikedOutChanging(bool value);
        partial void OnIsStrikedOutChanged();
        #endregion

        public Artifact()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ArtifactId in the schema.
        /// </summary>
        [Column(Storage = "_ArtifactId", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int ArtifactId
        {
            get
            {
                return this._ArtifactId;
            }
            set
            {
                if (this._ArtifactId != value)
                {
                    this.OnArtifactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ArtifactId = value;
                    this.SendPropertyChanged("ArtifactId");
                    this.OnArtifactIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Column(Storage = "_Category", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Storage = "_StartTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Storage = "_EndTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging();
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Y1 in the schema.
        /// </summary>
        [Column(Storage = "_Y1", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte Y1
        {
            get
            {
                return this._Y1;
            }
            set
            {
                if (this._Y1 != value)
                {
                    this.OnY1Changing(value);
                    this.SendPropertyChanging();
                    this._Y1 = value;
                    this.SendPropertyChanged("Y1");
                    this.OnY1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Y2 in the schema.
        /// </summary>
        [Column(Storage = "_Y2", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte Y2
        {
            get
            {
                return this._Y2;
            }
            set
            {
                if (this._Y2 != value)
                {
                    this.OnY2Changing(value);
                    this.SendPropertyChanging();
                    this._Y2 = value;
                    this.SendPropertyChanged("Y2");
                    this.OnY2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaselineVariability in the schema.
        /// </summary>
        [Column(Storage = "_BaselineVariability", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte BaselineVariability
        {
            get
            {
                return this._BaselineVariability;
            }
            set
            {
                if (this._BaselineVariability != value)
                {
                    this.OnBaselineVariabilityChanging(value);
                    this.SendPropertyChanging();
                    this._BaselineVariability = value;
                    this.SendPropertyChanged("BaselineVariability");
                    this.OnBaselineVariabilityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PeakTime in the schema.
        /// </summary>
        [Column(Storage = "_PeakTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long PeakTime
        {
            get
            {
                return this._PeakTime;
            }
            set
            {
                if (this._PeakTime != value)
                {
                    this.OnPeakTimeChanging(value);
                    this.SendPropertyChanging();
                    this._PeakTime = value;
                    this.SendPropertyChanged("PeakTime");
                    this.OnPeakTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PeakValue in the schema.
        /// </summary>
        [Column(Storage = "_PeakValue", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte PeakValue
        {
            get
            {
                return this._PeakValue;
            }
            set
            {
                if (this._PeakValue != value)
                {
                    this.OnPeakValueChanging(value);
                    this.SendPropertyChanging();
                    this._PeakValue = value;
                    this.SendPropertyChanged("PeakValue");
                    this.OnPeakValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Confidence in the schema.
        /// </summary>
        [Column(Storage = "_Confidence", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte Confidence
        {
            get
            {
                return this._Confidence;
            }
            set
            {
                if (this._Confidence != value)
                {
                    this.OnConfidenceChanging(value);
                    this.SendPropertyChanging();
                    this._Confidence = value;
                    this.SendPropertyChanged("Confidence");
                    this.OnConfidenceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Repair in the schema.
        /// </summary>
        [Column(Storage = "_Repair", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte Repair
        {
            get
            {
                return this._Repair;
            }
            set
            {
                if (this._Repair != value)
                {
                    this.OnRepairChanging(value);
                    this.SendPropertyChanging();
                    this._Repair = value;
                    this.SendPropertyChanged("Repair");
                    this.OnRepairChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Height in the schema.
        /// </summary>
        [Column(Storage = "_Height", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsNonInterpretable in the schema.
        /// </summary>
        [Column(Storage = "_IsNonInterpretable", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsNonInterpretable
        {
            get
            {
                return this._IsNonInterpretable;
            }
            set
            {
                if (this._IsNonInterpretable != value)
                {
                    this.OnIsNonInterpretableChanging(value);
                    this.SendPropertyChanging();
                    this._IsNonInterpretable = value;
                    this.SendPropertyChanged("IsNonInterpretable");
                    this.OnIsNonInterpretableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DecelerationCategory in the schema.
        /// </summary>
        [Column(Storage = "_DecelerationCategory", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte DecelerationCategory
        {
            get
            {
                return this._DecelerationCategory;
            }
            set
            {
                if (this._DecelerationCategory != value)
                {
                    this.OnDecelerationCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._DecelerationCategory = value;
                    this.SendPropertyChanged("DecelerationCategory");
                    this.OnDecelerationCategoryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NonReassuringFeatures in the schema.
        /// </summary>
        [Column(Storage = "_NonReassuringFeatures", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public byte NonReassuringFeatures
        {
            get
            {
                return this._NonReassuringFeatures;
            }
            set
            {
                if (this._NonReassuringFeatures != value)
                {
                    this.OnNonReassuringFeaturesChanging(value);
                    this.SendPropertyChanging();
                    this._NonReassuringFeatures = value;
                    this.SendPropertyChanged("NonReassuringFeatures");
                    this.OnNonReassuringFeaturesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContractionStart in the schema.
        /// </summary>
        [Column(Storage = "_ContractionStart", DbType = "integer", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> ContractionStart
        {
            get
            {
                return this._ContractionStart;
            }
            set
            {
                if (this._ContractionStart != value)
                {
                    this.OnContractionStartChanging(value);
                    this.SendPropertyChanging();
                    this._ContractionStart = value;
                    this.SendPropertyChanged("ContractionStart");
                    this.OnContractionStartChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsStrikedOut in the schema.
        /// </summary>
        [Column(Storage = "_IsStrikedOut", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsStrikedOut
        {
            get
            {
                return this._IsStrikedOut;
            }
            set
            {
                if (this._IsStrikedOut != value)
                {
                    this.OnIsStrikedOutChanging(value);
                    this.SendPropertyChanging();
                    this._IsStrikedOut = value;
                    this.SendPropertyChanged("IsStrikedOut");
                    this.OnIsStrikedOutChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// List of pelvic exams
    /// </summary>
    [Table(Name = @"PelvicExams")]
    public partial class PelvicExam : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ExamId;

        private long _Time;

        private string _Effacement;

        private string _Station;

        private string _Dilatation;

        private string _Presentation;

        private string _Position;

        private long _UpdateTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnExamIdChanging(int value);
        partial void OnExamIdChanged();
        partial void OnTimeChanging(long value);
        partial void OnTimeChanged();
        partial void OnEffacementChanging(string value);
        partial void OnEffacementChanged();
        partial void OnStationChanging(string value);
        partial void OnStationChanged();
        partial void OnDilatationChanging(string value);
        partial void OnDilatationChanged();
        partial void OnPresentationChanging(string value);
        partial void OnPresentationChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        partial void OnUpdateTimeChanging(long value);
        partial void OnUpdateTimeChanged();
        #endregion

        public PelvicExam()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ExamId in the schema.
        /// </summary>
        [Column(Storage = "_ExamId", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int ExamId
        {
            get
            {
                return this._ExamId;
            }
            set
            {
                if (this._ExamId != value)
                {
                    this.OnExamIdChanging(value);
                    this.SendPropertyChanging();
                    this._ExamId = value;
                    this.SendPropertyChanged("ExamId");
                    this.OnExamIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Time in the schema.
        /// </summary>
        [Column(Storage = "_Time", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Time
        {
            get
            {
                return this._Time;
            }
            set
            {
                if (this._Time != value)
                {
                    this.OnTimeChanging(value);
                    this.SendPropertyChanging();
                    this._Time = value;
                    this.SendPropertyChanged("Time");
                    this.OnTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Effacement in the schema.
        /// </summary>
        [Column(Storage = "_Effacement", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Effacement
        {
            get
            {
                return this._Effacement;
            }
            set
            {
                if (this._Effacement != value)
                {
                    this.OnEffacementChanging(value);
                    this.SendPropertyChanging();
                    this._Effacement = value;
                    this.SendPropertyChanged("Effacement");
                    this.OnEffacementChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Station in the schema.
        /// </summary>
        [Column(Storage = "_Station", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Station
        {
            get
            {
                return this._Station;
            }
            set
            {
                if (this._Station != value)
                {
                    this.OnStationChanging(value);
                    this.SendPropertyChanging();
                    this._Station = value;
                    this.SendPropertyChanged("Station");
                    this.OnStationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dilatation in the schema.
        /// </summary>
        [Column(Storage = "_Dilatation", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Dilatation
        {
            get
            {
                return this._Dilatation;
            }
            set
            {
                if (this._Dilatation != value)
                {
                    this.OnDilatationChanging(value);
                    this.SendPropertyChanging();
                    this._Dilatation = value;
                    this.SendPropertyChanged("Dilatation");
                    this.OnDilatationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Presentation in the schema.
        /// </summary>
        [Column(Storage = "_Presentation", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Presentation
        {
            get
            {
                return this._Presentation;
            }
            set
            {
                if (this._Presentation != value)
                {
                    this.OnPresentationChanging(value);
                    this.SendPropertyChanging();
                    this._Presentation = value;
                    this.SendPropertyChanged("Presentation");
                    this.OnPresentationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Column(Storage = "_Position", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(value);
                    this.SendPropertyChanging();
                    this._Position = value;
                    this.SendPropertyChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateTime in the schema.
        /// </summary>
        [Column(Storage = "_UpdateTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long UpdateTime
        {
            get
            {
                return this._UpdateTime;
            }
            set
            {
                if (this._UpdateTime != value)
                {
                    this.OnUpdateTimeChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateTime = value;
                    this.SendPropertyChanged("UpdateTime");
                    this.OnUpdateTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataContextEpisode.DataEntry in the schema.
    /// </summary>
    [Table(Name = @"DataEntries")]
    public partial class DataEntry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EntryId;

        private string _Name;

        private string _Value;

        private string _UserId;

        private string _UserName;

        private long _UpdateTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEntryIdChanging(int value);
        partial void OnEntryIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUpdateTimeChanging(long value);
        partial void OnUpdateTimeChanged();
        #endregion

        public DataEntry()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EntryId in the schema.
        /// </summary>
        [Column(Storage = "_EntryId", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int EntryId
        {
            get
            {
                return this._EntryId;
            }
            set
            {
                if (this._EntryId != value)
                {
                    this.OnEntryIdChanging(value);
                    this.SendPropertyChanging();
                    this._EntryId = value;
                    this.SendPropertyChanged("EntryId");
                    this.OnEntryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateTime in the schema.
        /// </summary>
        [Column(Storage = "_UpdateTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long UpdateTime
        {
            get
            {
                return this._UpdateTime;
            }
            set
            {
                if (this._UpdateTime != value)
                {
                    this.OnUpdateTimeChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateTime = value;
                    this.SendPropertyChanged("UpdateTime");
                    this.OnUpdateTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataContextEpisode.CurveSnapshot in the schema.
    /// </summary>
    [Table(Name = @"CurveSnapshots")]
    public partial class CurveSnapshot : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SnapshotId;

        private string _Data;

        private long _UpdateTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSnapshotIdChanging(int value);
        partial void OnSnapshotIdChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnUpdateTimeChanging(long value);
        partial void OnUpdateTimeChanged();
        #endregion

        public CurveSnapshot()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SnapshotId in the schema.
        /// </summary>
        [Column(Storage = "_SnapshotId", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public int SnapshotId
        {
            get
            {
                return this._SnapshotId;
            }
            set
            {
                if (this._SnapshotId != value)
                {
                    this.OnSnapshotIdChanging(value);
                    this.SendPropertyChanging();
                    this._SnapshotId = value;
                    this.SendPropertyChanged("SnapshotId");
                    this.OnSnapshotIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Storage = "_Data", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UpdateTime in the schema.
        /// </summary>
        [Column(Storage = "_UpdateTime", CanBeNull = false, DbType = "integer NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long UpdateTime
        {
            get
            {
                return this._UpdateTime;
            }
            set
            {
                if (this._UpdateTime != value)
                {
                    this.OnUpdateTimeChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateTime = value;
                    this.SendPropertyChanged("UpdateTime");
                    this.OnUpdateTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataContextEpisode.Parameter in the schema.
    /// </summary>
    [Table(Name = @"Parameters")]
    public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Name;

        private string _Value;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public Parameter()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "text NOT NULL", IsPrimaryKey = true)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
