#pragma once

#include "patterns, fetus.h"
#include "fhrPartSet.h"
#include "fhrPart.h"

namespace patterns
{

	class CFhrPartsCompare
	{
		/*
		-------------------------------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------------------------------
		*/
	public:
		CFhrPartsCompare(void);
		virtual ~CFhrPartsCompare(void);

		/*
		-------------------------------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------------------------------
		*/
	protected:
		string m_strID;
		fhrPartSet *m_pExpert;
		fhrPartSet *m_pTest;
		double m_dMinOverlap;
		long m_lEdgeBuffer;
		long m_lNumSamples;
		long m_lNumSampsConsider;

		int m_iExpert;
		int m_iTest;
		int m_iDetect;
		int m_iMiss;
		int m_iImportantMiss;
		int m_iTP;
		int m_iFP;
		long m_lExpSamp;
		long m_lSampOver;
		long m_lSampNon;

		double m_dSens;
		double m_dPPV;
		double m_dSampSens;
		double m_dSampPPV;

		fhrPartSet m_pMissedParts;
		fhrPartSet m_pFalseParts;

		bool *m_pbExpMask;
		bool *m_pbFPMask;

		double m_dMissRate;
		double m_dFPRate;
		double m_dExpRate;

		bool m_bDoSort;
		bool clearMemory;

		bool m_SetCrossTypeDecel;
		int m_CrossType[8][8];

		/*
		-------------------------------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------------------------------
		*/
	public:
		void Clear(void);
		void Compare(void);
		void SetID(string strID);
		void SetExpert(fhrPartSet *pExpParts, long numSamples);
		void SetExpert(fetus *f);
		void SetTest(fhrPartSet *pTestParts);
		void SetTest(fetus *f);
		static void FhrPartsFromFetus(fhrPartSet *p, fetus *f);
		static void FhrPartsFromFetusContractions(fhrPartSet *p, fetus *f);
		void TrimEndParts(fhrPartSet *p, long lEdgeBuffer);
		void Merge(CFhrPartsCompare *pPartsComp);
		fhrPartSet *GetExpert(void) {return m_pExpert;}
		fhrPartSet *GetTest(void) {return m_pTest;}
		void SetClearMemory(bool b) {clearMemory = b;} 

		void SetCrossTypeDecel() {m_SetCrossTypeDecel = true;}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		long EdgeBuffer(void)
		{
			return m_lEdgeBuffer;
		}

		void PrintHeaderString(FILE *fid, bool simple = true);
		void PrintOPString(FILE *fid, bool simple = true);
		void PrintCrossTypeDecel(FILE *fid);

		/*
		===============================================================================================================
		===============================================================================================================
		*/

		int Expert(void)
		{
			return m_iExpert;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		int Detect(void)
		{
			return m_iDetect;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		int Test(void)
		{
			return m_iTest;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		int Miss(void)
		{
			return m_iMiss;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		int ImportantMiss(void)
		{
			return m_iImportantMiss;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		int TP(void)
		{
			return m_iTP;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		int FP(void)
		{
			return m_iFP;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		long ExpertSamp(void)
		{
			return m_lExpSamp;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		long SampOver(void)
		{
			return m_lSampOver;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		long SampNon(void)
		{
			return m_lSampNon;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double Sens(void)
		{
			return m_dSens;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double PPV(void)
		{
			return m_dPPV;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double SampSens(void)
		{
			return m_dSampSens;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double SampPPV(void)
		{
			return m_dSampPPV;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double MissRate(void)
		{
			return m_dMissRate;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double FPRate(void)
		{
			return m_dFPRate;
		}

		/*
		===============================================================================================================
		===============================================================================================================
		*/
		double ExpRate(void)
		{
			return m_dExpRate;
		}

		/*
		-------------------------------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------------------------------
		*/
	private:
		void CalcSensPPV(void);
		void CalcRates(void);

		bool is_important_miss(fhrPart *pPart);
	};
}